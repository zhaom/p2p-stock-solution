<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.solution.p2p.core.dao.MemberAccountMapper" >
  <resultMap id="BaseResultMap" type="com.solution.p2p.core.common.entity.MemberAccount" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="m_id" property="mId" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="set_no" property="setNo" jdbcType="INTEGER" />
    <result column="data_version" property="dataVersion" jdbcType="INTEGER" />
    <result column="direction" property="direction" jdbcType="INTEGER" />
    <result column="amount" property="amount" jdbcType="BIGINT" />
    <result column="frozen_amount" property="frozenAmount" jdbcType="BIGINT" />
    <result column="unit" property="unit" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, m_id, name, type, set_no, data_version, direction, amount, frozen_amount, unit, 
    state, create_time, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.solution.p2p.core.common.entity.MemberAccountExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member_account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from member_account
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from member_account
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.solution.p2p.core.common.entity.MemberAccountExample" >
    delete from member_account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.solution.p2p.core.common.entity.MemberAccount" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into member_account (m_id, name, type, 
      set_no, data_version, direction, 
      amount, frozen_amount, unit, 
      state, create_time, update_time
      )
    values (#{mId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, 
      #{setNo,jdbcType=INTEGER}, #{dataVersion,jdbcType=INTEGER}, #{direction,jdbcType=INTEGER}, 
      #{amount,jdbcType=BIGINT}, #{frozenAmount,jdbcType=BIGINT}, #{unit,jdbcType=INTEGER}, 
      #{state,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.solution.p2p.core.common.entity.MemberAccount" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into member_account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="mId != null" >
        m_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="setNo != null" >
        set_no,
      </if>
      <if test="dataVersion != null" >
        data_version,
      </if>
      <if test="direction != null" >
        direction,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="frozenAmount != null" >
        frozen_amount,
      </if>
      <if test="unit != null" >
        unit,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="mId != null" >
        #{mId,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="setNo != null" >
        #{setNo,jdbcType=INTEGER},
      </if>
      <if test="dataVersion != null" >
        #{dataVersion,jdbcType=INTEGER},
      </if>
      <if test="direction != null" >
        #{direction,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=BIGINT},
      </if>
      <if test="frozenAmount != null" >
        #{frozenAmount,jdbcType=BIGINT},
      </if>
      <if test="unit != null" >
        #{unit,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.solution.p2p.core.common.entity.MemberAccountExample" resultType="java.lang.Integer" >
    select count(*) from member_account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update member_account
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.mId != null" >
        m_id = #{record.mId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.setNo != null" >
        set_no = #{record.setNo,jdbcType=INTEGER},
      </if>
      <if test="record.dataVersion != null" >
        data_version = #{record.dataVersion,jdbcType=INTEGER},
      </if>
      <if test="record.direction != null" >
        direction = #{record.direction,jdbcType=INTEGER},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=BIGINT},
      </if>
      <if test="record.frozenAmount != null" >
        frozen_amount = #{record.frozenAmount,jdbcType=BIGINT},
      </if>
      <if test="record.unit != null" >
        unit = #{record.unit,jdbcType=INTEGER},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update member_account
    set id = #{record.id,jdbcType=BIGINT},
      m_id = #{record.mId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      set_no = #{record.setNo,jdbcType=INTEGER},
      data_version = #{record.dataVersion,jdbcType=INTEGER},
      direction = #{record.direction,jdbcType=INTEGER},
      amount = #{record.amount,jdbcType=BIGINT},
      frozen_amount = #{record.frozenAmount,jdbcType=BIGINT},
      unit = #{record.unit,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.solution.p2p.core.common.entity.MemberAccount" >
    update member_account
    <set >
      <if test="mId != null" >
        m_id = #{mId,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="setNo != null" >
        set_no = #{setNo,jdbcType=INTEGER},
      </if>
      <if test="dataVersion != null" >
        data_version = #{dataVersion,jdbcType=INTEGER},
      </if>
      <if test="direction != null" >
        direction = #{direction,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=BIGINT},
      </if>
      <if test="frozenAmount != null" >
        frozen_amount = #{frozenAmount,jdbcType=BIGINT},
      </if>
      <if test="unit != null" >
        unit = #{unit,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.solution.p2p.core.common.entity.MemberAccount" >
    update member_account
    set m_id = #{mId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      set_no = #{setNo,jdbcType=INTEGER},
      data_version = #{dataVersion,jdbcType=INTEGER},
      direction = #{direction,jdbcType=INTEGER},
      amount = #{amount,jdbcType=BIGINT},
      frozen_amount = #{frozenAmount,jdbcType=BIGINT},
      unit = #{unit,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>