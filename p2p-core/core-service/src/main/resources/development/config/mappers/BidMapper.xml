<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.solution.p2p.core.dao.BidMapper" >
  <resultMap id="BaseResultMap" type="com.solution.p2p.core.common.entity.Bid" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="code" property="code" jdbcType="CHAR" />
    <result column="prod_id" property="prodId" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="m_id" property="mId" jdbcType="BIGINT" />
    <result column="guaranty_amount" property="guarantyAmount" jdbcType="BIGINT" />
    <result column="collect_times" property="collectTimes" jdbcType="INTEGER" />
    <result column="collect_amount" property="collectAmount" jdbcType="BIGINT" />
    <result column="collected_amount" property="collectedAmount" jdbcType="BIGINT" />
    <result column="life_duration" property="lifeDuration" jdbcType="INTEGER" />
    <result column="life_duration_unit" property="lifeDurationUnit" jdbcType="INTEGER" />
    <result column="collect_interest_rate" property="collectInterestRate" jdbcType="DECIMAL" />
    <result column="collect_interest_rate_unit" property="collectInterestRateUnit" jdbcType="INTEGER" />
    <result column="request_interest_rate" property="requestInterestRate" jdbcType="DECIMAL" />
    <result column="request_interest_rate_unit" property="requestInterestRateUnit" jdbcType="INTEGER" />
    <result column="collect_from_time" property="collectFromTime" jdbcType="TIMESTAMP" />
    <result column="collect_thru_time" property="collectThruTime" jdbcType="TIMESTAMP" />
    <result column="bid_success_time" property="bidSuccessTime" jdbcType="TIMESTAMP" />
    <result column="bid_status" property="bidStatus" jdbcType="INTEGER" />
    <result column="collect_pay_status" property="collectPayStatus" jdbcType="INTEGER" />
    <result column="requirement_service_fee" property="requirementServiceFee" jdbcType="BIGINT" />
    <result column="requirement_management_fee" property="requirementManagementFee" jdbcType="BIGINT" />
    <result column="requirement_other_fee" property="requirementOtherFee" jdbcType="BIGINT" />
    <result column="is_split_profit" property="isSplitProfit" jdbcType="INTEGER" />
    <result column="split_ratio" property="splitRatio" jdbcType="INTEGER" />
    <result column="is_transfer" property="isTransfer" jdbcType="INTEGER" />
    <result column="transfer_parent_id" property="transferParentId" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, code, prod_id, name, m_id, guaranty_amount, collect_times, collect_amount, collected_amount, 
    life_duration, life_duration_unit, collect_interest_rate, collect_interest_rate_unit, 
    request_interest_rate, request_interest_rate_unit, collect_from_time, collect_thru_time, 
    bid_success_time, bid_status, collect_pay_status, requirement_service_fee, requirement_management_fee, 
    requirement_other_fee, is_split_profit, split_ratio, is_transfer, transfer_parent_id, 
    create_time, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.solution.p2p.core.common.entity.BidExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bid
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from bid
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from bid
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.solution.p2p.core.common.entity.BidExample" >
    delete from bid
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.solution.p2p.core.common.entity.Bid" >
    insert into bid (id, code, prod_id, 
      name, m_id, guaranty_amount, 
      collect_times, collect_amount, collected_amount, 
      life_duration, life_duration_unit, collect_interest_rate, 
      collect_interest_rate_unit, request_interest_rate, 
      request_interest_rate_unit, collect_from_time, 
      collect_thru_time, bid_success_time, bid_status, 
      collect_pay_status, requirement_service_fee, 
      requirement_management_fee, requirement_other_fee, 
      is_split_profit, split_ratio, is_transfer, 
      transfer_parent_id, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{code,jdbcType=CHAR}, #{prodId,jdbcType=BIGINT}, 
      #{name,jdbcType=VARCHAR}, #{mId,jdbcType=BIGINT}, #{guarantyAmount,jdbcType=BIGINT}, 
      #{collectTimes,jdbcType=INTEGER}, #{collectAmount,jdbcType=BIGINT}, #{collectedAmount,jdbcType=BIGINT}, 
      #{lifeDuration,jdbcType=INTEGER}, #{lifeDurationUnit,jdbcType=INTEGER}, #{collectInterestRate,jdbcType=DECIMAL}, 
      #{collectInterestRateUnit,jdbcType=INTEGER}, #{requestInterestRate,jdbcType=DECIMAL}, 
      #{requestInterestRateUnit,jdbcType=INTEGER}, #{collectFromTime,jdbcType=TIMESTAMP}, 
      #{collectThruTime,jdbcType=TIMESTAMP}, #{bidSuccessTime,jdbcType=TIMESTAMP}, #{bidStatus,jdbcType=INTEGER}, 
      #{collectPayStatus,jdbcType=INTEGER}, #{requirementServiceFee,jdbcType=BIGINT}, 
      #{requirementManagementFee,jdbcType=BIGINT}, #{requirementOtherFee,jdbcType=BIGINT}, 
      #{isSplitProfit,jdbcType=INTEGER}, #{splitRatio,jdbcType=INTEGER}, #{isTransfer,jdbcType=INTEGER}, 
      #{transferParentId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.solution.p2p.core.common.entity.Bid" >
    insert into bid
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="code != null" >
        code,
      </if>
      <if test="prodId != null" >
        prod_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="mId != null" >
        m_id,
      </if>
      <if test="guarantyAmount != null" >
        guaranty_amount,
      </if>
      <if test="collectTimes != null" >
        collect_times,
      </if>
      <if test="collectAmount != null" >
        collect_amount,
      </if>
      <if test="collectedAmount != null" >
        collected_amount,
      </if>
      <if test="lifeDuration != null" >
        life_duration,
      </if>
      <if test="lifeDurationUnit != null" >
        life_duration_unit,
      </if>
      <if test="collectInterestRate != null" >
        collect_interest_rate,
      </if>
      <if test="collectInterestRateUnit != null" >
        collect_interest_rate_unit,
      </if>
      <if test="requestInterestRate != null" >
        request_interest_rate,
      </if>
      <if test="requestInterestRateUnit != null" >
        request_interest_rate_unit,
      </if>
      <if test="collectFromTime != null" >
        collect_from_time,
      </if>
      <if test="collectThruTime != null" >
        collect_thru_time,
      </if>
      <if test="bidSuccessTime != null" >
        bid_success_time,
      </if>
      <if test="bidStatus != null" >
        bid_status,
      </if>
      <if test="collectPayStatus != null" >
        collect_pay_status,
      </if>
      <if test="requirementServiceFee != null" >
        requirement_service_fee,
      </if>
      <if test="requirementManagementFee != null" >
        requirement_management_fee,
      </if>
      <if test="requirementOtherFee != null" >
        requirement_other_fee,
      </if>
      <if test="isSplitProfit != null" >
        is_split_profit,
      </if>
      <if test="splitRatio != null" >
        split_ratio,
      </if>
      <if test="isTransfer != null" >
        is_transfer,
      </if>
      <if test="transferParentId != null" >
        transfer_parent_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="code != null" >
        #{code,jdbcType=CHAR},
      </if>
      <if test="prodId != null" >
        #{prodId,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="mId != null" >
        #{mId,jdbcType=BIGINT},
      </if>
      <if test="guarantyAmount != null" >
        #{guarantyAmount,jdbcType=BIGINT},
      </if>
      <if test="collectTimes != null" >
        #{collectTimes,jdbcType=INTEGER},
      </if>
      <if test="collectAmount != null" >
        #{collectAmount,jdbcType=BIGINT},
      </if>
      <if test="collectedAmount != null" >
        #{collectedAmount,jdbcType=BIGINT},
      </if>
      <if test="lifeDuration != null" >
        #{lifeDuration,jdbcType=INTEGER},
      </if>
      <if test="lifeDurationUnit != null" >
        #{lifeDurationUnit,jdbcType=INTEGER},
      </if>
      <if test="collectInterestRate != null" >
        #{collectInterestRate,jdbcType=DECIMAL},
      </if>
      <if test="collectInterestRateUnit != null" >
        #{collectInterestRateUnit,jdbcType=INTEGER},
      </if>
      <if test="requestInterestRate != null" >
        #{requestInterestRate,jdbcType=DECIMAL},
      </if>
      <if test="requestInterestRateUnit != null" >
        #{requestInterestRateUnit,jdbcType=INTEGER},
      </if>
      <if test="collectFromTime != null" >
        #{collectFromTime,jdbcType=TIMESTAMP},
      </if>
      <if test="collectThruTime != null" >
        #{collectThruTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bidSuccessTime != null" >
        #{bidSuccessTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bidStatus != null" >
        #{bidStatus,jdbcType=INTEGER},
      </if>
      <if test="collectPayStatus != null" >
        #{collectPayStatus,jdbcType=INTEGER},
      </if>
      <if test="requirementServiceFee != null" >
        #{requirementServiceFee,jdbcType=BIGINT},
      </if>
      <if test="requirementManagementFee != null" >
        #{requirementManagementFee,jdbcType=BIGINT},
      </if>
      <if test="requirementOtherFee != null" >
        #{requirementOtherFee,jdbcType=BIGINT},
      </if>
      <if test="isSplitProfit != null" >
        #{isSplitProfit,jdbcType=INTEGER},
      </if>
      <if test="splitRatio != null" >
        #{splitRatio,jdbcType=INTEGER},
      </if>
      <if test="isTransfer != null" >
        #{isTransfer,jdbcType=INTEGER},
      </if>
      <if test="transferParentId != null" >
        #{transferParentId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.solution.p2p.core.common.entity.BidExample" resultType="java.lang.Integer" >
    select count(*) from bid
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update bid
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.code != null" >
        code = #{record.code,jdbcType=CHAR},
      </if>
      <if test="record.prodId != null" >
        prod_id = #{record.prodId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.mId != null" >
        m_id = #{record.mId,jdbcType=BIGINT},
      </if>
      <if test="record.guarantyAmount != null" >
        guaranty_amount = #{record.guarantyAmount,jdbcType=BIGINT},
      </if>
      <if test="record.collectTimes != null" >
        collect_times = #{record.collectTimes,jdbcType=INTEGER},
      </if>
      <if test="record.collectAmount != null" >
        collect_amount = #{record.collectAmount,jdbcType=BIGINT},
      </if>
      <if test="record.collectedAmount != null" >
        collected_amount = #{record.collectedAmount,jdbcType=BIGINT},
      </if>
      <if test="record.lifeDuration != null" >
        life_duration = #{record.lifeDuration,jdbcType=INTEGER},
      </if>
      <if test="record.lifeDurationUnit != null" >
        life_duration_unit = #{record.lifeDurationUnit,jdbcType=INTEGER},
      </if>
      <if test="record.collectInterestRate != null" >
        collect_interest_rate = #{record.collectInterestRate,jdbcType=DECIMAL},
      </if>
      <if test="record.collectInterestRateUnit != null" >
        collect_interest_rate_unit = #{record.collectInterestRateUnit,jdbcType=INTEGER},
      </if>
      <if test="record.requestInterestRate != null" >
        request_interest_rate = #{record.requestInterestRate,jdbcType=DECIMAL},
      </if>
      <if test="record.requestInterestRateUnit != null" >
        request_interest_rate_unit = #{record.requestInterestRateUnit,jdbcType=INTEGER},
      </if>
      <if test="record.collectFromTime != null" >
        collect_from_time = #{record.collectFromTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.collectThruTime != null" >
        collect_thru_time = #{record.collectThruTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.bidSuccessTime != null" >
        bid_success_time = #{record.bidSuccessTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.bidStatus != null" >
        bid_status = #{record.bidStatus,jdbcType=INTEGER},
      </if>
      <if test="record.collectPayStatus != null" >
        collect_pay_status = #{record.collectPayStatus,jdbcType=INTEGER},
      </if>
      <if test="record.requirementServiceFee != null" >
        requirement_service_fee = #{record.requirementServiceFee,jdbcType=BIGINT},
      </if>
      <if test="record.requirementManagementFee != null" >
        requirement_management_fee = #{record.requirementManagementFee,jdbcType=BIGINT},
      </if>
      <if test="record.requirementOtherFee != null" >
        requirement_other_fee = #{record.requirementOtherFee,jdbcType=BIGINT},
      </if>
      <if test="record.isSplitProfit != null" >
        is_split_profit = #{record.isSplitProfit,jdbcType=INTEGER},
      </if>
      <if test="record.splitRatio != null" >
        split_ratio = #{record.splitRatio,jdbcType=INTEGER},
      </if>
      <if test="record.isTransfer != null" >
        is_transfer = #{record.isTransfer,jdbcType=INTEGER},
      </if>
      <if test="record.transferParentId != null" >
        transfer_parent_id = #{record.transferParentId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update bid
    set id = #{record.id,jdbcType=BIGINT},
      code = #{record.code,jdbcType=CHAR},
      prod_id = #{record.prodId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      m_id = #{record.mId,jdbcType=BIGINT},
      guaranty_amount = #{record.guarantyAmount,jdbcType=BIGINT},
      collect_times = #{record.collectTimes,jdbcType=INTEGER},
      collect_amount = #{record.collectAmount,jdbcType=BIGINT},
      collected_amount = #{record.collectedAmount,jdbcType=BIGINT},
      life_duration = #{record.lifeDuration,jdbcType=INTEGER},
      life_duration_unit = #{record.lifeDurationUnit,jdbcType=INTEGER},
      collect_interest_rate = #{record.collectInterestRate,jdbcType=DECIMAL},
      collect_interest_rate_unit = #{record.collectInterestRateUnit,jdbcType=INTEGER},
      request_interest_rate = #{record.requestInterestRate,jdbcType=DECIMAL},
      request_interest_rate_unit = #{record.requestInterestRateUnit,jdbcType=INTEGER},
      collect_from_time = #{record.collectFromTime,jdbcType=TIMESTAMP},
      collect_thru_time = #{record.collectThruTime,jdbcType=TIMESTAMP},
      bid_success_time = #{record.bidSuccessTime,jdbcType=TIMESTAMP},
      bid_status = #{record.bidStatus,jdbcType=INTEGER},
      collect_pay_status = #{record.collectPayStatus,jdbcType=INTEGER},
      requirement_service_fee = #{record.requirementServiceFee,jdbcType=BIGINT},
      requirement_management_fee = #{record.requirementManagementFee,jdbcType=BIGINT},
      requirement_other_fee = #{record.requirementOtherFee,jdbcType=BIGINT},
      is_split_profit = #{record.isSplitProfit,jdbcType=INTEGER},
      split_ratio = #{record.splitRatio,jdbcType=INTEGER},
      is_transfer = #{record.isTransfer,jdbcType=INTEGER},
      transfer_parent_id = #{record.transferParentId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.solution.p2p.core.common.entity.Bid" >
    update bid
    <set >
      <if test="code != null" >
        code = #{code,jdbcType=CHAR},
      </if>
      <if test="prodId != null" >
        prod_id = #{prodId,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="mId != null" >
        m_id = #{mId,jdbcType=BIGINT},
      </if>
      <if test="guarantyAmount != null" >
        guaranty_amount = #{guarantyAmount,jdbcType=BIGINT},
      </if>
      <if test="collectTimes != null" >
        collect_times = #{collectTimes,jdbcType=INTEGER},
      </if>
      <if test="collectAmount != null" >
        collect_amount = #{collectAmount,jdbcType=BIGINT},
      </if>
      <if test="collectedAmount != null" >
        collected_amount = #{collectedAmount,jdbcType=BIGINT},
      </if>
      <if test="lifeDuration != null" >
        life_duration = #{lifeDuration,jdbcType=INTEGER},
      </if>
      <if test="lifeDurationUnit != null" >
        life_duration_unit = #{lifeDurationUnit,jdbcType=INTEGER},
      </if>
      <if test="collectInterestRate != null" >
        collect_interest_rate = #{collectInterestRate,jdbcType=DECIMAL},
      </if>
      <if test="collectInterestRateUnit != null" >
        collect_interest_rate_unit = #{collectInterestRateUnit,jdbcType=INTEGER},
      </if>
      <if test="requestInterestRate != null" >
        request_interest_rate = #{requestInterestRate,jdbcType=DECIMAL},
      </if>
      <if test="requestInterestRateUnit != null" >
        request_interest_rate_unit = #{requestInterestRateUnit,jdbcType=INTEGER},
      </if>
      <if test="collectFromTime != null" >
        collect_from_time = #{collectFromTime,jdbcType=TIMESTAMP},
      </if>
      <if test="collectThruTime != null" >
        collect_thru_time = #{collectThruTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bidSuccessTime != null" >
        bid_success_time = #{bidSuccessTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bidStatus != null" >
        bid_status = #{bidStatus,jdbcType=INTEGER},
      </if>
      <if test="collectPayStatus != null" >
        collect_pay_status = #{collectPayStatus,jdbcType=INTEGER},
      </if>
      <if test="requirementServiceFee != null" >
        requirement_service_fee = #{requirementServiceFee,jdbcType=BIGINT},
      </if>
      <if test="requirementManagementFee != null" >
        requirement_management_fee = #{requirementManagementFee,jdbcType=BIGINT},
      </if>
      <if test="requirementOtherFee != null" >
        requirement_other_fee = #{requirementOtherFee,jdbcType=BIGINT},
      </if>
      <if test="isSplitProfit != null" >
        is_split_profit = #{isSplitProfit,jdbcType=INTEGER},
      </if>
      <if test="splitRatio != null" >
        split_ratio = #{splitRatio,jdbcType=INTEGER},
      </if>
      <if test="isTransfer != null" >
        is_transfer = #{isTransfer,jdbcType=INTEGER},
      </if>
      <if test="transferParentId != null" >
        transfer_parent_id = #{transferParentId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.solution.p2p.core.common.entity.Bid" >
    update bid
    set code = #{code,jdbcType=CHAR},
      prod_id = #{prodId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      m_id = #{mId,jdbcType=BIGINT},
      guaranty_amount = #{guarantyAmount,jdbcType=BIGINT},
      collect_times = #{collectTimes,jdbcType=INTEGER},
      collect_amount = #{collectAmount,jdbcType=BIGINT},
      collected_amount = #{collectedAmount,jdbcType=BIGINT},
      life_duration = #{lifeDuration,jdbcType=INTEGER},
      life_duration_unit = #{lifeDurationUnit,jdbcType=INTEGER},
      collect_interest_rate = #{collectInterestRate,jdbcType=DECIMAL},
      collect_interest_rate_unit = #{collectInterestRateUnit,jdbcType=INTEGER},
      request_interest_rate = #{requestInterestRate,jdbcType=DECIMAL},
      request_interest_rate_unit = #{requestInterestRateUnit,jdbcType=INTEGER},
      collect_from_time = #{collectFromTime,jdbcType=TIMESTAMP},
      collect_thru_time = #{collectThruTime,jdbcType=TIMESTAMP},
      bid_success_time = #{bidSuccessTime,jdbcType=TIMESTAMP},
      bid_status = #{bidStatus,jdbcType=INTEGER},
      collect_pay_status = #{collectPayStatus,jdbcType=INTEGER},
      requirement_service_fee = #{requirementServiceFee,jdbcType=BIGINT},
      requirement_management_fee = #{requirementManagementFee,jdbcType=BIGINT},
      requirement_other_fee = #{requirementOtherFee,jdbcType=BIGINT},
      is_split_profit = #{isSplitProfit,jdbcType=INTEGER},
      split_ratio = #{splitRatio,jdbcType=INTEGER},
      is_transfer = #{isTransfer,jdbcType=INTEGER},
      transfer_parent_id = #{transferParentId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>